# ---------- Meeting chat scopes (delegated) ----------
MEETING_CHAT_SCOPES = [
    "User.Read",
    "Chat.ReadWrite",
    "ChatMessage.Send",
    "OnlineMeetings.Read",
]

# ---------- Safe helpers ----------
def _escape_for_odata_literal(s: str) -> str:
    return s.replace("'", "''")

def get_user_token_for(scopes: list[str] | None = None) -> str:
    try:
        use_scopes = scopes or DELEGATED_SCOPES  # use your global list if you prefer
        accounts = public_app.get_accounts()
        if not accounts:
            raise HTTPException(status_code=401, detail="No cached account. Run device auth first.")

        result = public_app.acquire_token_silent(use_scopes, account=accounts[0])
        if not result or "access_token" not in result:
            raise HTTPException(status_code=401, detail="No cached delegated token for required scopes. Re-run device auth.")

        save_cache()  # persist any refresh
        return result["access_token"]
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail={"where": "get_user_token_for", "error": str(e)})

def _lookup_meeting_thread_id(join_url: str) -> str:
    try:
        token = get_user_token_for(MEETING_CHAT_SCOPES)
        headers = {"Authorization": f"Bearer {token}"}
        literal = _escape_for_odata_literal(join_url)
        url = f"{GRAPH}/me/onlineMeetings"
        params = {"$filter": f"joinWebUrl eq '{literal}'"}

        r = requests.get(url, headers=headers, params=params, timeout=30)
        if r.status_code != 200:
            raise HTTPException(status_code=r.status_code,
                                detail={"where": "lookup onlineMeetings", "response": r.text})

        values = (r.json() or {}).get("value", [])
        if not values:
            raise HTTPException(status_code=404,
                                detail="Meeting not found by joinUrl for the cached user. Check exact URL and user context.")
        thread_id = (values[0].get("chatInfo") or {}).get("threadId")
        if not thread_id:
            raise HTTPException(status_code=404, detail="chatInfo.threadId not present on meeting.")
        return thread_id
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail={"where": "_lookup_meeting_thread_id", "error": str(e)})

def _send_message_to_chat(chat_id: str, content: str) -> dict:
    try:
        token = get_user_token_for(MEETING_CHAT_SCOPES)
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        body = {"body": {"contentType": "html", "content": content}}
        url = f"{GRAPH}/chats/{chat_id}/messages"

        r = requests.post(url, headers=headers, json=body, timeout=30)
        if r.status_code not in (200, 201, 202):
            raise HTTPException(status_code=r.status_code,
                                detail={"where": "post chat message", "response": r.text})
        return r.json()
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail={"where": "_send_message_to_chat", "error": str(e)})



# Route
@app.post("/meeting-chat/send")
def send_to_meeting_chat(payload: MeetingChatPayload):
    chat_id = _lookup_meeting_thread_id(payload.join_url)
    result = _send_message_to_chat(chat_id, payload.message)
    return {"ok": True, "chat_id": chat_id, "message_id": result.get("id")}


@app.get("/meeting-chat/_token")
def diag_token():
    try:
        tok = get_user_token_for(MEETING_CHAT_SCOPES)
        return {"ok": True, "len": len(tok)}
    except HTTPException as e:
        return {"ok": False, "error": e.detail}

@app.get("/meeting-chat/_lookup")
def diag_lookup(join_url: str):
    try:
        return {"ok": True, "chat_id": _lookup_meeting_thread_id(join_url)}
    except HTTPException as e:
        return {"ok": False, "error": e.detail}


docker compose up -d --build
(Invoke-RestMethod "http://localhost:8080/openapi.json").paths.Keys


Invoke-RestMethod "http://localhost:8080/meeting-chat/_token"
Invoke-RestMethod "http://localhost:8080/meeting-chat/_lookup?join_url=$( [uri]::EscapeDataString( (Get-Content app/json_templates/meeting_chat_send.json | ConvertFrom-Json).join_url ) )"


Invoke-RestMethod -Uri "http://localhost:8080/meeting-chat/send" -Method Post `
  -ContentType "application/json" -InFile "app/json_templates/meeting_chat_send.json"
