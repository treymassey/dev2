# ===================== MODELS (near your other BaseModel classes) =====================
class MeetingChatPayload(BaseModel):
    # Keep this a plain string so we donâ€™t fight URL validators during testing
    join_url: str
    message: str


# ===================== HELPERS (near your other utilities) =====================
def _escape_for_odata_literal(s: str) -> str:
    """
    OData string literal escaping: single quote becomes two single quotes.
    Needed for $filter joinWebUrl eq '<literal>'
    """
    return s.replace("'", "''")

def _lookup_meeting_thread_id(join_url: str) -> str:
    """
    Find the meeting by JoinWebUrl using delegated token from MSAL cache and
    return chatInfo.threadId (e.g., '19:meeting_...@thread.v2').
    """
    token = get_user_token()  # <-- your existing helper; uses MSAL cache
    headers = {"Authorization": f"Bearer {token}"}

    # Exact match on JoinWebUrl with OData escaping
    literal = _escape_for_odata_literal(join_url)
    url = f"{GRAPH}/me/onlineMeetings"
    params = {"$filter": f"joinWebUrl eq '{literal}'"}

    r = requests.get(url, headers=headers, params=params, timeout=30)
    if r.status_code != 200:
        raise HTTPException(status_code=r.status_code,
                            detail={"where": "lookup onlineMeetings", "response": r.text})
    data = r.json()
    values = data.get("value", [])
    if not values:
        raise HTTPException(status_code=404,
                            detail="Meeting not found by joinUrl. Ensure device auth ran for the same user and the URL matches exactly.")
    meeting = values[0]
    chat_info = meeting.get("chatInfo") or {}
    thread_id = chat_info.get("threadId")
    if not thread_id:
        raise HTTPException(status_code=404, detail="chatInfo.threadId not present on meeting.")
    return thread_id

def _send_message_to_chat(chat_id: str, content: str) -> dict:
    """
    Send a chatMessage (HTML OK) into the specified chat (meeting chat).
    """
    token = get_user_token()
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
    }
    body = {
        "body": {
            "contentType": "html",   # or "text"
            "content": content
        }
    }
    url = f"{GRAPH}/chats/{chat_id}/messages"
    r = requests.post(url, headers=headers, json=body, timeout=30)
    if r.status_code not in (200, 201, 202):
        raise HTTPException(status_code=r.status_code,
                            detail={"where": "post chat message", "response": r.text})
    return r.json()


# ===================== ROUTE (place with your other @app.post/@app.get) =====================
@app.post("/meeting-chat/send")
def send_to_meeting_chat(payload: MeetingChatPayload):
    """
    Body JSON file example (PowerShell one-liner reads from file):
    {
      "join_url": "<Teams join URL>",
      "message": "Hello meeting!"
    }
    """
    chat_id = _lookup_meeting_thread_id(payload.join_url)
    result = _send_message_to_chat(chat_id, payload.message)
    return {"ok": True, "chat_id": chat_id, "message_id": result.get("id")}
